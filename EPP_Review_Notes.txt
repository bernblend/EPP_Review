Exam topics: The CPSC 301 initial exams will cover
the following main topics in CPSC 120, 121, and 131.
Please remember that texts are allowed during the
exam, but no lecture notes or code listings.



Program design with pseudocode using modularity
and information hiding.

Program documentation.

Correct and appropriate use in programs of the
following:

  1. Standard control structures for
  assignment, selection, repetition functions.

  2. Input and output to and from text and binary files.

  3. Arrays and strings.

        Array Syntax:

          datatype var[SIZE or initializer list]

        Array to a Function:

          Pass the name of array and int value with
          size of the array.

        Array from a Function:

          Array may be return type of a function.

          Because arrays are actually pointers to data in
          storage, when an array is passed as an
          argument, it's automatically a call by
          reference.

        Access to Arrays:

          -Must use index value.

          -Creates a reference variable.

          -int number[] = {1,2,3,4,5};

        Things to Remember:

          -Must have a size or an initializer list.

          -Fixed size.

          -Reference variables.

          -Beware of bounds errors.

        More Arrays:

          -Lists of numbers, prices, names.

          -Two-dimensional arrays (more columns).

          -Parallel arrays (use data with diff datatype).

          -Arrays of objects (use to save variable use).


  4. Pointers and dynamic variables.

        Pointer - datatype that contains the address of a value in memory.

        POINTERS can be used to SHARE VALUES among diff parts of a program. (see pointer.cpp)

          Example:

            int JohnsAcct = 12345;
            int* acctPtr = &JohnsAcct;

            NOTE: The '&' finds the address of where John's account is stored in memory, you then get THAT VALUE in the POINTER.

        To print a value using a pointer is by
        'de-referencing' the pointer with the asterisk
        (i.e. *acctPtr ).

        REMEMBER: When assigning a value to a pointer,
        make sure the value is an address.
        //lets add a pointer to hold the address of num
        int* numPtr = &num;
        //then you can use the value of the pointer.
        *numPtr += 5;

        Dynamic variables - Vectors

        Vectors - Like an array list from Java.
          NOT a fixed size and can grow in size.

        Use   #include <vector>    directive.

        Creating Vectors:

          -empty vectors
          -initial size
          -initial size & initial value for each element.

        When adding a variable to an empty vector you
        must use the 'pushback' command. The item is
        automatically added to the end of the vector.
        (i.e. carVins.push_back(vin); )

        You can then use the vector as an array:
        for(int i = 0; i < num.size(); i++)
      	{
      		num[i] = rand();
      	}


        //Other vector functions include:
      	//.at returns the value located at element 0
      	int value = num.at(0);

      	//.capacity() returns the max number of elements
      	//that may be stored
      	//without adding additional memory
      	int value2 = num.capacity();

      	//.pop_back removes the last element from a vector
      	num.pop_back();

      	//.clear() is used to clear a vector of all elements
      	num.clear();

      	//.empty() returns true if vector is empty
      	if(num.empty() == true)
      		cout << "vector num is empty\n";

      	//.swap(vector2) swaps the contents




  5. Recursion.

  6. Classes and objects of the classes.

        Class - blueprint of an object.

        Classes Contain:
              -Instance data
                - adjectives that describe a class.
              -Constructor(s)
                - functions used to create an instance of a class.
              -Functions
                - code common to all objects of the class.

        Classes are:
              -Reusable
                - Multiple programs can use the same class.
              -Encapsulate data
                - data is defined as private.
                - data is accessed using get and set methods (accessor and mutator methods).


        Static: Keeps track of data that applies to all
                objects created from a class. When a
                variable is defined as 'static' in the
                header file, the cpu allows all instances
                of the class to share the same memory
                location of that ONE variable.

        Encapsulation:
            Class:
              -private member
                  Accessible ONLY to the functions that
                  are members of the same class.
              -public functions
                  Accessible to the calling program.
              -protected member
                  Accessible to members of Classes that
                  inherit from the Class.



  7. Templates.

  8. Operator overloading.

  9. Lists, stacks, queues, binary trees with both array
  and linked list implementations.

        Abstract Data Types:

          DIFFERENT from Classes since they do NOT include any function definitions, they only group DATA items.

          -consists of one or many other data types.

          -can contain other struct data types and arrays.

        Things to Remember:

          -to access data members, use dot operator.

          -to compare, must compare each data member.

          -can be initialized when created.

          * Data Structures allow the grouping of many datatypes (int, string, double, etc.) into one data type. Like in the case below for datatype: employee. (refer to employees.cpp)

          Example:

            struct Address
            {
              char houseNum[5];
              char streetName[30];
              char city[30];
              char state[3];
              int zipcode;
            };
            struct DateOfBirth
            {
              int month;
              int day;
              int year;
            };
            struct Employee
            {
              char firstName[30];
              char lastName[30];
              int eeNumber;
              double hourlyWage;
              Address homeAddress;
              DateOfBirth dob;
            };

  10. Searching and sorting.





******** ITEMS NOT ON EXAM ************

-hashing
-B, B+ trees
-inheritance
-polymorphism
-virtual
-functions

****************************************



Categories: (Covered by DR)

Linked Lists (Covered in 9 above)

Arrays (Covered in 3 above)

Binary Search Trees (Covered in 9 above)

Recursion (Covered in 5 above)

Classes (Covered in 6 above)

File I/O (Covered in 2 above)





***************************************

Using Predefined Functions:


<string>
    string getline()
    int length()
    string substr(int pos)
    string substr(int start, int len)



<cmath>
    sqrt()
    pow()
    sin()
    cos()
    fabs()      abs value of a floating point



<iomanip>
    fixed          for trailing zeros
    left, right      great for columns
    setfill(char fillchar)     provides fill character
    setprecision(int num)    how many decimal places
    setw(int width)      how wide to allocate per variable




<cstdlib>
    int rand()      produce a random number
    void srand(int num)     allows to see random number
    int abs(int num)
    void exit(int num)    terminate calling process

  NOTE: rand() is a pseudorandom # generator - #'s repeat
    So use a seed value (i.e. time)
          srand(time(0));

          number = rand() % 50 + 1;   //From 1-50.

    General form (bounds a and b):
          (rand() * (b - a + 1)) + a

          Ex:    Die: rand() * 6 + 1;




<cctype>                   check character
    bool isalpha(char c)
    bool isdigit(char c)
    bool islower(char c)
    bool isupper(char c)
    bool isspace(char c)




************************************************

        CALL BY VALUE & CALL BY REFERENCE

Call by value:
    New space in memory is created.

Call by reference:
    Two variable point to same space in memory.


* Primitive datatypes are the ONLY ones that can do
  call by value.


***************************************************


        DEFAULT ARGUMENTS

Values used in functions will be the ones
originally declared unless otherwise included
when calling the function.


***************************************************


        OVERLOADING FUNCTIONS

Two functions can have the same name as long as
the list of parameters is different (different
datatypes or different number of parameters).


***************************************************



****

     cin.ignore()    AND     cin.getline()



cin.ignore()

    Used to ignore the end line symbol from previous cout statement (user presses enter).


cin.getline()

    Allows to read in a stream with spaces until the user presses enter (up to the initialized amount of the array).






******
